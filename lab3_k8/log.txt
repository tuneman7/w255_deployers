**********************************
* Architect: Don Irwin           
* Primary difference between     
* This and run.sh is  
* The kubectl files are wrapped for running in non-interactive shell
* I.E.:
*$(minikube kubectl -- get pods --all-namespaces| wc -l)
* RATHER THAN: 
*$(kubectl get pods --all-namespaces| wc -l)
* 
**********************************
**********************************
* Loosely based on the project   *
* Below                          *
**********************************
**********************************
* U.C. Berkeley MIDS W255        *
* Summer 2022                    *
* Instructor: James York Winegar *
* Student: Don Irwin             *
* Lab 3 Submission               *
**********************************
*********************************
*                               *
* CHECK DEPENDENCIES            *
*                               *
*********************************
Kubectl is installed
*********************************
*                               *
* FINISHED                      *
* CHECK DEPENDENCIES            *
*                               *
*********************************
*********************************
*                               *
* FINISHED                      *
* CHECK DEPENDENCIES            *
*                               *
*********************************
*********************************
*                               *
* Recycle kubernetes            *
*                               *
*********************************
✋  Stopping node "minikube"  ...
🛑  Powering off "minikube" via SSH ...
🛑  1 node stopped.
eval unset DOCKER_TLS_VERIFY;
unset DOCKER_HOST;
unset DOCKER_CERT_PATH;
unset MINIKUBE_ACTIVE_DOCKERD;
unset SSH_AUTH_SOCK;
unset SSH_AGENT_PID;
*********************************
*                               *
* finished recycle k8           *
*                               *
*********************************
*********************************
*                               *
* finished recycle k8           *
*                               *
*********************************
*********************************
*                               *
* recycle redis and create      *
*   docker network              *
*   redis outside of minicube   *
*   is needed for testing       *
*                               *
*********************************
*********************************
*                               *
* recycle redis and create      *
*   docker network              *
*   redis outside of minicube   *
*   is needed for testing       *
*                               *
*********************************
docker stop redis
docker rm redis
docker network rm w255
docker run -d --name redis -p 6379:6379 redis --net w255
ded6d4d9ee71c26b4be208c91042103548be9b8ca09f9dc0ac4951a87f768cf6
*********************************
*                               *
* Installing Dependencies       *
*   poetry install              *
*                               *
*********************************
Installing dependencies from lock file

No dependencies to install or update
*********************************
*                               *
* Training the model and writing*
*   *.pkl file                  *
*                               *
*********************************
./lab3/model_pipeline.pkl exists.
*********************************
*                               *
* Copying pkl file to the src   *
*   *.pkl file                  *
*                               *
*********************************
*********************************
*                               *
* Running app locally poetry    *
*   poetry run pytest -vv -s    *
*                               *
*********************************
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-7.1.2, pluggy-1.0.0 -- /home/don/.cache/pypoetry/virtualenvs/src-uGVCJ1pM-py3.10/bin/python
cachedir: .pytest_cache
rootdir: /data/school/MIDS/w255_deployers/lab3_k8
plugins: anyio-3.6.1
collecting ... collected 12 items

tests/test_lab3.py::test_version <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_read_main <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_read_hello <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_read_hello_no_param <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_read_hello_wrong_param <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_read_docs <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_check_health_health <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_predict_function <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_predict_function_malformed_list <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_predict_function_extra_param_list <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_predict_function_wrong_type_in_list <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py PASSED
tests/test_lab3.py::test_getcacheratio_function <- ../../w255/ucb_githubs/summer22-Tuneman7/lab_3/lab3/tests/test_lab3.py predict_calls 4
The Hit Ratio: 4 3 0.75
PASSED

============================== 12 passed in 0.68s ==============================
*********************************
*  FINISHED                     *
* Running app locally poetry    *
*   poetry run pytest -vv -s    *
*  SUCCESS                      *
*********************************
*********************************
*  STARTING                     *
* Docker stopping and rebuild   *
*                               *
*********************************
docker stop redis
redis
docker rm redis
redis
docker network rm w255
docker stop w255_lab3_don_irwin
docker rm w255_lab3_don_irwin
😄  minikube v1.31.2 on Ubuntu 22.04
🆕  Kubernetes 1.27.4 is now available. If you would like to upgrade, specify: --kubernetes-version=v1.27.4
✨  Using the docker driver based on existing profile
👍  Starting control plane node minikube in cluster minikube
🚜  Pulling base image ...
🔄  Restarting existing docker container for "minikube" ...
🐳  Preparing Kubernetes v1.22.6 on Docker 24.0.4 ...
🔎  Verifying Kubernetes components...
    ▪ Using image docker.io/kubernetesui/dashboard:v2.7.0
    ▪ Using image docker.io/kubernetesui/metrics-scraper:v1.0.8
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
💡  Some dashboard features require the metrics-server addon. To enable all features please run:

	minikube addons enable metrics-server	


🌟  Enabled addons: storage-provisioner, default-storageclass, dashboard

    ▪ Want kubectl v1.22.6? Try 'minikube kubectl -- get pods -A'
🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
Point shell output to minikube docker
eval export DOCKER_TLS_VERIFY="1"
export DOCKER_HOST="tcp://192.168.49.2:2376"
export DOCKER_CERT_PATH="/home/don/.minikube/certs"
export MINIKUBE_ACTIVE_DOCKERD="minikube"

# To point your shell to minikube's docker-daemon, run:
# eval $(minikube -p minikube docker-env)
docker build -t w255_lab3_don_irwin -f Dockerfile.255lab3
kubectl delete -f deployment-pythonapi.yaml
kubectl delete -f deployment-redis.yaml
kubectl delete -f service-redis.yaml
kubectl delete -f service-prediction.yaml
kubectl delete -f namespace.yaml
kubectl create -f namespace.yaml
namespace/w255 created
kubectl apply -f deployment-redis.yaml
deployment.apps/redisserver created
kubectl apply -f service-redis.yaml
service/redis created
kubectl apply -f deployment-pythonapi.yaml
deployment.apps/pythonapi created
kubectl apply -f service-prediction.yaml
service/frontend created
my_all_pods=10
my_all_pods=10
my_all_pods_after_deploy=14
*********************************
*  ENDING                       *
* Docker stopping and rebuild   *
*                               *
*********************************
**********************************
*  STARTING                      *
* port forwarding                *
*                                *
* Make sure all pods are running *
* Before issuing port forwarding *
*                                *
**********************************
/data/school/MIDS/w255_deployers/lab3_k8
my_all_pods=5
10
2
my_all_pods=5
running_pods=6
set up the dashboard
note this can be done in yaml
Open this creature:
http://localhost:8001:/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/
*********************************
*  BEGIN                        *
* port forwarding               *
*                               *
*********************************
kubectl port-forward -n w255 service/frontend 8000:8000 --address='0.0.0.0' > output_1693466283010.txt &
*********************************
*  ENDING                       *
* port forwarding               *
*                               *
*********************************
*********************************
*                               *
*        WAITING. ....          *
*        API not ready          *
*                               *
*********************************
*********************************
*                               *
*        API is ready           *
*                               *
*********************************


*********************************
*                               *
*     Running CURL Calls        *
*                               *
*  Note that FASTAPI uses 307   *
*  internal redirects for its   *
*  query string parsing unless  *
*  the request is formed line   *
*     /hello/?name=Don          *
*                               *
*********************************
About to call the following URI: http://localhost:8000/health
"health is good"
the return code is : 200
About to call the following URI: http://localhost:8000/hello/?name=Don
"hello Don"
the return code is : 200
About to call the following URI: http://localhost:8000/hello/?nam=Don
{"detail":[{"loc":["query","name"],"msg":"field required","type":"value_error.missing"}]}
the return code is : 422
About to call the following URI: http://localhost:8000/
the return code is : 404
{"detail":"Not Implemented"}
About to call the following URI: http://localhost:8000/docs
the return code is : 200

About to call the following URI: http://localhost:8000/hello?name=Don

the return code is : 307

*********************************
*                               *
* Posts to predict -- should    *
* have 200 return codes         *
*********************************
*********************************
* Posts to predict -- should    *
* have 200 return codes         *
* We are doing 200 iterations   *
*********************************
*********************************
* END OF GOOD 200 ZONE          *
* Posts to predict -- should    *
* have 200 return codes         *
*********************************
good_return_codes=5000
bad_return_codes=0
*********************************
* BEGINNING OF BAD ZONE         *
* Posts to predict -- should    *
* NOT have 200 return codes     *
*********************************
*********************************
* END OF BAD ZONE               *
* Posts to predict -- should    *
* NOT have 200 return codes     *
*********************************
good_return_codes=5000
bad_return_codes=5
*********************************
*                               *
*        End of bash handling   *
*                               *
*********************************
*********************************
*   End of Event Pitching      *
*********************************
*********************************
*   Expected                    *
*********************************
good_return_codes=5000
bad_return_codes=5
*********************************
*   Actual                      *
*********************************
good_return_codes=5000
bad_return_codes=5
*********************************
*   RETURN CODE COUNT           *
*                               *
*   MATCH: Good                 *
*                               *
*********************************
